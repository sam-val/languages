// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: movie_credits.sql

package db

import (
	"context"
)

const createMovieCredit = `-- name: CreateMovieCredit :one
INSERT INTO "MovieCredits" (
  movie_id, filmmaker_id, role_id
) VALUES (
  $1, $2, $3
)
RETURNING id, filmmaker_id, movie_id, role_id, created_at
`

type CreateMovieCreditParams struct {
	MovieID     int64 `json:"movie_id"`
	FilmmakerID int64 `json:"filmmaker_id"`
	RoleID      int64 `json:"role_id"`
}

func (q *Queries) CreateMovieCredit(ctx context.Context, arg CreateMovieCreditParams) (MovieCredit, error) {
	row := q.db.QueryRowContext(ctx, createMovieCredit, arg.MovieID, arg.FilmmakerID, arg.RoleID)
	var i MovieCredit
	err := row.Scan(
		&i.ID,
		&i.FilmmakerID,
		&i.MovieID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMovieCredit = `-- name: DeleteMovieCredit :exec
DELETE FROM "MovieCredits"
WHERE id = $1
`

func (q *Queries) DeleteMovieCredit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMovieCredit, id)
	return err
}

const getMovieCredit = `-- name: GetMovieCredit :one
SELECT id, filmmaker_id, movie_id, role_id, created_at FROM "MovieCredits"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMovieCredit(ctx context.Context, id int64) (MovieCredit, error) {
	row := q.db.QueryRowContext(ctx, getMovieCredit, id)
	var i MovieCredit
	err := row.Scan(
		&i.ID,
		&i.FilmmakerID,
		&i.MovieID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const updateMovieCredit = `-- name: UpdateMovieCredit :one
UPDATE "MovieCredits"
SET movie_id = $2, filmmaker_id = $3, role_id = $4
WHERE id = $1
RETURNING id, filmmaker_id, movie_id, role_id, created_at
`

type UpdateMovieCreditParams struct {
	ID          int64 `json:"id"`
	MovieID     int64 `json:"movie_id"`
	FilmmakerID int64 `json:"filmmaker_id"`
	RoleID      int64 `json:"role_id"`
}

func (q *Queries) UpdateMovieCredit(ctx context.Context, arg UpdateMovieCreditParams) (MovieCredit, error) {
	row := q.db.QueryRowContext(ctx, updateMovieCredit,
		arg.ID,
		arg.MovieID,
		arg.FilmmakerID,
		arg.RoleID,
	)
	var i MovieCredit
	err := row.Scan(
		&i.ID,
		&i.FilmmakerID,
		&i.MovieID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}
